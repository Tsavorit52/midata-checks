import streamlit as st #for the website
import pandas as pd #to handle Excel files
import re #for Regex
import base64 #to import the Image
from io import BytesIO #to import the Image
from PIL import Image #to import the Image

#initialize session state variables
if 'errormessage' not in st.session_state:
    st.session_state['errormessage'] = None

if 'peoplefiltered' not in st.session_state:
    st.session_state['peoplefiltered'] = None

if 'allgoodmessage' not in st.session_state:
    st.session_state['allgoodmessage'] = None

#add title and informations/how to use it
st.title("MiData sanity checks")
st.info("Datenschutzhinweis: Diese Website speichert keine der geladenen Daten. Sämtliche Daten werden nur verarbeitet und beim schliessen der Session gelöscht!",icon="ℹ️")
st.write("Exportiere eine Excel oder CSV Datei aus [MiData](%s) und lade sie hier, um nach Fehlern zu suchen. z.B. Duplikate oder ungültige Angaben" % 'https://db.scout.ch/de')
st.markdown('**Wichtig! Alle Funktionen funktionieren nur wenn dein MiData auf Deutsch ist und wenn du "Alle Angaben" exportierst.**')

with st.expander("Wie exportiere ich die passende Datei?"):
    st.write('''
        - stelle sicher, dass dein MiData auf Deutsch ist!
        - Gehe auf die Ebene, die du checken willst
        - Danach zum Tab "Personen"
        - Exportiere "Alle Angaben" als Excel Datei. (Export -> Excel -> Alle Angaben)
    ''')

    #Bild für Anleitung als Base64 
    encoded_image = (r"")

    # Decode the base64 image back to bytes
    image_data = base64.b64decode(encoded_image)
    image = Image.open(BytesIO(image_data))
    
    #show image
    st.image(image)

#add divider
st.divider()

#upload an excel file
peopleCSV = st.file_uploader("Bitte ein Excel Export hochladen:", type=["csv","xlsx"], accept_multiple_files=False, disabled=False, label_visibility="visible")

#when file as selected
if peopleCSV is not None:
    try:
        if peopleCSV.type == 'text/csv': 
            #load file with pandas
            allpeople = pd.read_csv(peopleCSV,encoding = "utf-8", sep=";")
            st.success("Daten geladen!")
        elif peopleCSV.type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 
            #load file with pandas
            allpeople = pd.read_excel(peopleCSV, sheet_name="Sheet1")
            st.success("Daten geladen!")
        st.session_state.errormessage = None
        st.session_state.peoplefiltered = None
        st.session_state.allgoodmessage = None
    except:
        st.error("Daten konnten nicht geladen werden!")

    #define positions for buttons
    col1, col2, col3, col4 =  st.columns([1,1,1,1])
    col5, col6, col7, col8 = st.columns([1,1,1,1])

    #buttons and their functions:

    #duplicates
    with col1:
        if st.button("Duplikate", help='Sucht Einträge mit dem gleichen Vor- und Nachamen'):
            #if the file contains the colums "Vorname" und "Nachname"
            if all(col in allpeople.columns for col in ["Vorname", "Nachname"]):
                #add the duplicates to the list and set error to None
                st.session_state.peoplefiltered = allpeople[allpeople.duplicated(subset=["Vorname", "Nachname"], keep=False)]
                st.session_state.errormessage = None
                if st.session_state.peoplefiltered.empty:
                    st.session_state.allgoodmessage = 'Keine Duplikate gefunden.'
            #the file misses the colums -> throw error
            else:
                st.session_state.errormessage = 'Die geladene Liste enthält keine Spalten "Vorname" und/oder "Nachname"!'
                st.session_state.peoplefiltered = None

    #duplicate roles
    with col2:
        if st.button("Doppelte Rolle"):
            #test if the imported file contains the "Rollen" Column
            if [col for col in ["Rollen"] if col in allpeople.columns]:
                #create st.session_state.peoplefiltered as an empty object
                st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                #iterrate all rows
                for index, row in allpeople.iterrows():
                    if pd.notna(row["Rollen"]):
                        #split Column "Rollen" at the ,
                        roles = row["Rollen"].split(", ")
                        #make this list into a pd.Series 
                        roles_series = pd.Series(roles)
                        #search for duplicates
                        duplicate_roles = roles_series[roles_series.duplicated(keep=False)]
                        #if there are duplicates, add them to the list
                        if not duplicate_roles.empty:
                            st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                st.session_state.errormessage = None
                if st.session_state.peoplefiltered.empty:
                    st.session_state.allgoodmessage = 'Keine doppelten Rollen gefunden.'
            else:
                st.session_state.errormessage = 'Die geladene Liste enthält keine Spalten "Rollen"!'
                st.session_state.peoplefiltered = None

    #invalid address
    with col3:
        if st.button("Ungültige Adresse", help='Sucht Einträge mit ungültigen Adressen oder einem der Adressfelder leer.'):
             #if the file contains the colums "Strasse", "Hausnummer", "PLZ", "Ort", "Land"
            if all(col in allpeople.columns for col in ["Strasse", "Hausnummer", "PLZ", "Ort", "Land"]):
                st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                for index, row in allpeople.iterrows():
                    added = False
                    # Validate "Strasse"
                    if (pd.isna(row["Strasse"]) or re.search(r"^[/ ()'A-Za-záàâäéèêëíìîïóòôöúùûüÁÀÂÄÉÈÊËÍÌÎÏÓÒÔÖÚÙÛÜ.-]+$", str(row["Strasse"])) is None) and not added:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        added = True

                    # Validate "Hausnummer"
                    hausnummer = row["Hausnummer"]
                    if isinstance(hausnummer, float) and hausnummer.is_integer():  # Check if it's a whole number
                        hausnummer = str(int(hausnummer))  # Convert to an integer and then string
                    else:
                        hausnummer = str(hausnummer)  # Keep as string
                    if (pd.isna(row["Hausnummer"]) or re.search(r"^[0-9]{1,3}[a-z]{0,1}$", hausnummer) is None) and not added:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        added = True

                    # Validate "PLZ"
                    plz = row["PLZ"]
                    if isinstance(plz, float) and plz.is_integer():  # Check if it's a whole number
                        plz = str(int(plz))  # Convert to an integer and then string
                    else:
                        plz = str(plz)  # Keep as string
                    if (pd.isna(row["PLZ"]) or re.search(r"^[0-9]{4}$", plz) is None) and not added:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        added = True

                    # Validate "Ort"
                    if (pd.isna(row["Ort"]) or re.search(r"^[A-Z][ /()'A-Za-zäöüÄÖÜéèêëáàâô.-]+$", str(row["Ort"])) is None) and not added:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        added = True                    

                    # Validate "Land"
                    if (pd.isna(row["Land"]) or re.search(r"Schweiz", str(row["Land"])) is None) and not added:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        added = True

                st.session_state.errormessage = None
                if st.session_state.peoplefiltered.empty:
                    st.session_state.allgoodmessage = 'Keine ungültige Adressen gefunden.'

            else:
                st.session_state.errormessage = 'In der geladenen Liste fehlt mindestens eine dieser Spalten: "Strasse", "Hausnummer", "PLZ", "Ort", "Land"!'
                st.session_state.peoplefiltered = None

    #invalid AHV Nr.
    with col4:
        if st.button("Ungültige AHV-Nr."):
            #if the file contains the colums "AHV-Nummer"
            if all(col in allpeople.columns for col in ["AHV-Nummer"]):
                st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                for index, row in allpeople.iterrows():

                    # Validate "AHV-Nummer", notmatches the regex
                    if pd.isna(row["AHV-Nummer"]) or re.search(r"756\.[0-9]{4}+\.[0-9]{4}+\.[0-9]{2}", str(row["AHV-Nummer"])) is None:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                st.session_state.errormessage = None
                if st.session_state.peoplefiltered.empty:
                    st.session_state.allgoodmessage = 'Keine ungültige AHV-Nr gefunden.'

            else:
                st.session_state.errormessage = 'In der geladenen Liste fehlt die Spalten: "AHV-Nummer"!'
                st.session_state.peoplefiltered = None

    #invalid Email
    with col5:
        if st.button("Ungültige E-Mail", help='Sucht Einträge ohne oder mit ungültigen E-Mail Adressen'):
            #get a list of all columns containing "E-Mail"
            email_columns = [col for col in allpeople.columns if "E-Mail" in col]
            #if this list is not empty, continue
            if email_columns != []:
                #create an empty list
                st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                #iterate trough each row
                for index, row in allpeople.iterrows():
                    #variable becomes true if one of the columns not matches the regex
                    onematch = False
                    #variable turn false, if one Email Columns contains text
                    allNulls = True
                    #check all email_columns
                    for email_column in email_columns:
                        if pd.notna(row[email_column]):
                            #columns has content -> not all of them can be NULL
                            allNulls = False
                            #if column not matches Regex, mark as a Match
                            if re.search(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", str(row[email_column])) is None:
                                onematch = True
                    #if all of the Columns are Null or one of them not matches the Regex, add to the list
                    if onematch or allNulls:
                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                st.session_state.errormessage = None
                if st.session_state.peoplefiltered.empty:
                    st.session_state.allgoodmessage = 'Keine ungültige E-Mail Adressen gefunden.'
            #if list of email Columns is empty, throw error
            else:
                st.session_state.errormessage = 'In der geladenen Liste gibt es keine Spalte mit "E-Mail" im Namen!'
                st.session_state.peoplefiltered = None

    #invalid PhoneNumber
    with col6:
        @st.dialog("Ungültige Telefon Nr")
        def tel():
            #let user choose for the available phone number fields
            telefon_columns = [col for col in allpeople.columns if col.startswith("Telefonnummer")]
            #check if telefon_columns is empty
            if telefon_columns != []:
                column = st.radio( "Welche Spalte?",telefon_columns)

                #let user choose type
                typ = st.radio( "Nummer Typ? (zeigt alle, die nicht diesem Typ entsprechen)",["Handynummer (075-079)", "Festnetznummer (nicht 075-079)", "Typ egal"])

                #let user choose format
                format = st.radio( "Welches Format? (zeigt alle, die nicht diesem Format entsprechen)",["+41 xx xxx xx xx","+41xxxxxxxxx","0041 xx xxx xx xx","0041xxxxxxxxx", "xxx xxx xx xx","xxxxxxxxxx"])

                if st.button("Ergebnisse anzeigen"):
                    #initialize regex and regex_type variable
                    regex = None
                    regex_type = None
                    #define sub regex for number types
                    if typ == 'Handynummer (075-079)':
                        regex_type = r"7[5-9]{1}"

                    elif typ == 'Festnetznummer (nicht 075-079)':
                        regex_type = r"(?!7[5-9])[0-9]{2}"
                    #if Typ egal, was selected
                    else: 
                        regex_type = r"[0-9]{2}"

                    #merge the selected Type Regex with the matching Regex for the desired format
                    if format == "+41 xx xxx xx xx":
                        regex = r"^\+41 "+regex_type+r" [0-9]{3} [0-9]{2} [0-9]{2}$"
                    elif format == "+41xxxxxxxxx":
                        regex = r"^\+41"+regex_type+r"[0-9]{7}"
                    elif format == "0041 xx xxx xx xx":
                        regex = r"0041 "+regex_type+r" [0-9]{3} [0-9]{2} [0-9]{2}"
                    elif format == "0041xxxxxxxxx":
                        regex = r"0041"+regex_type+r"[0-9]{7}"
                    elif format == "xxx xxx xx xx":
                        regex = r"0"+regex_type+r" [0-9]{3} [0-9]{2} [0-9]{2}"
                    else:
                        regex = r"0"+regex_type+r"[0-9]{7}"

                    #create an empty list
                    st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                    #iterate trough each row
                    for index, row in allpeople.iterrows():
                        #if the regex matches, add to the list
                        if re.search(regex, str(row[column])) is None:
                            st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                    st.session_state.errormessage = None
                    if st.session_state.peoplefiltered.empty:
                        st.session_state.allgoodmessage = 'Keine ungültige Telefonnummern gefunden.'
                    #rerun script to close dialog
                    st.rerun()
            #if telefon_columns is empty, throw error
            else:
                st.session_state.errormessage = 'In der geladenen Liste gibt es keine Spalte mit "Telefonnummer" im Namen!'
                st.session_state.peoplefiltered = None
                st.error(st.session_state.errormessage)
        st.button("Ungültige Tel Nr.", on_click=tel)

    #empty fields
    with col7:
        @st.dialog("Leere Felder")
        def empty():
            #let the user choose which fields
            columns = st.multiselect( "Welche Spalte/n?",allpeople.columns)

            #if more than one column is selected, let the user select of all or just one of them needs to be empty to show up
            if len(columns) > 1:
                comparison = st.radio(
                    "select",
                    ["UND", "ODER"],
                    captions=[
                        "Alle ausgewählten Spalten müssen leer sein um angezeigt zu werden",
                        "Nur eine der ausgewählten Spalten muss leer sein um angezeigt zu werden"
                    ],label_visibility="hidden"
                )
            if st.button("Ergebnisse anzeigen"):
                #check if at lest one column was selected
                if len(columns) != 0:
                    #create an empty list
                    st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                    #iterate trough each row
                    for index, row in allpeople.iterrows():
                        #if only one column was selected
                        if len(columns) == 1:
                            #if the field is empty, add row to the list
                            if pd.isna(row[columns[0]]):
                                st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)

                        #if multiple columns are selected
                        else:
                            #this variable turn True of this row was added to the list
                            added = False
                            #this variable turn true if one of the selected fields is not null
                            wasnotna = False

                            #iterad trough all selected columns
                            for selected_column in columns:
                                #if comparison is UND
                                if comparison == 'UND':
                                    #if this fiels contains something, mark it as wasnotNA
                                    if pd.notna(row[selected_column]):
                                        wasnotna = True
                                #if comparison is ODER
                                else:
                                    #if this field is empty and the columns was not yet added
                                    if pd.isna(row[selected_column]) and added != True:
                                        #add it to the list and mark as added
                                        st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                                        added = True
                            #if all of the selected columns where empty, this variable says False
                            if wasnotna == False:
                                #add column to the list
                                st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                    st.session_state.errormessage = None
                    if st.session_state.peoplefiltered.empty:
                        st.session_state.allgoodmessage = 'Keine ungültige leere Felder gefunden.'
                    #rerun script to close the dialog
                    st.rerun()
                #if no columns was selected
                else:
                    st.error("Bitte mindestens eine Spalte auswählen!")
        st.button("Leere Felder", on_click=empty)

    #custom regex
    with col8:
        @st.dialog("Custom Regex")
        def regex():
            st.write("Suche nach einem eigenem Muster mit Regex. (Sprache für Suchmuster)")
            st.write("[Diese Seite](%s) hilft beim zusammenstellen" % 'https://regex-generator.olafneumann.org')
            st.write("[Diese Seite](%s) hilft beim testen" % 'https://regex101.com')
            
            #ask user to select a column
            column = st.selectbox("Welche Spalte?",allpeople.columns)

            #ask user to enter a regex
            customRegex = st.text_input("Deine Regex", placeholder=r"z.B. [A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,} für eine Email")
            #as user to show all the rows that match/not match the regex
            match = st.radio(
                    "Match",
                    ["MATCH", "NOT MATCH"],
                    captions=[
                        "Zeige alle, die auf diese Regex passen",
                        "Zeige alle, die NICHT auf diese Regex passen"
                    ], label_visibility="hidden"
                )

            if st.button("Ergebnisse anzeigen"):
                #only run if a customRegex was added
                if customRegex != '':
                    st.session_state.peoplefiltered = pd.DataFrame(columns=allpeople.columns)
                    #iterate trough each row
                    for index, row in allpeople.iterrows():
                        #if match was selected
                        if match == 'MATCH':
                             #if regex matches, add to the list
                             if re.search(customRegex, str(row[column])) is not None:
                                 st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        #if not match was selected
                        else:
                            #if regex not matches, add to the list
                            if re.search(customRegex, str(row[column])) is None:
                                st.session_state.peoplefiltered = pd.concat([st.session_state.peoplefiltered, pd.DataFrame([row])],ignore_index=True)
                        st.session_state.errormessage = None
                        if st.session_state.peoplefiltered.empty:
                            st.session_state.allgoodmessage = 'Keine Einträge zu deiner Regex gefunden.'
                        st.rerun()
                #error if no Regex was entered
                else:
                    st.error("Bitte das Regex Feld befüllen!")
        st.button("Custom Regex", on_click=regex)
        


    #define area that shows the results
    display_area = st.empty()

    #if people are filtered show them
    if st.session_state.peoplefiltered is not None:
        #if the list was empty, show the message that all of it is good :)
        if st.session_state.peoplefiltered.empty:
            st.success(st.session_state.allgoodmessage)
        else:
            display_area.write(st.session_state.peoplefiltered)

    #if there is an error, show the error
    if st.session_state.errormessage is not None:
        display_area.error(st.session_state.errormessage)
